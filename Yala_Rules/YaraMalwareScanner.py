'''
This is a real time scanner using python
We are going to use the watchdog module for this
scanner to work 
'''
import os
import hashlib
import time
import yara
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
yara_rules_file = os.path.join(os.path.dirname(__file__),"YaraRules.yara")
compiled_yara_rules=""
class MalwareScanner(FileSystemEventHandler):
    def __init__(self):
        self.Banner()
        print("\n[+] Starting Malware Scanner using Yara Rules\n")
        self.Banner()
        time.sleep(3)
    def listContents(self,path=None):
        try:
            contents = os.listdir(path)
            #check if an item is a directory or file 
            for item in contents:
                if os.path.isdir(os.path.join(path,item)):
                    #if its  a directory, we list the files
                    self.listContents(os.path.join(path,item))
                else:
                    # Scan all the files passed here
                    self.ScanFile(os.path.join(path,item))
        except:
            print("[-] An Error Occurred")
            return False
    def ScanFile (self, file_path):
        file_name = str(file_path).split("/")[-1]
        compiled_yara_rules = yara.compile(yara_rules_file)
        try:
            pattern_match = compiled_yara_rules.match(file_path)
            if(bool(pattern_match)):
                print(f"[+] The  {file_name} contains potential Malware. Location: {file_path}")
        except yara.Error as e:
            print(f"{e}")
    def Banner(self):
        for i in range (0,50):
            print("=",end="")
class RealTimeScanner(FileSystemEventHandler):
    def on_any_event(self, event):
        if event.is_directory:
            return 
        #ACheck for changes in real time
        #if anything changes, scan the directory again
        if event.event_type == 'created':
            scanner.ScanFile(event.src_path)
        elif event.event_type == 'modified':
            scanner.ScanFile(event.src_path)
        elif event.event_type == 'deleted':
            scanner.ScanFile(event.src_path)
    def startWatching(self,folder_to_scan):
        watch_init = RealTimeScanner()
        watcher = Observer()
        watcher.schedule(watch_init, folder_to_scan, recursive=True)
        watcher.start()

        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            watcher.stop()
        watcher.join()
if __name__ == "__main__":
    scanner = MalwareScanner()
    try:
        directory_to_scan = input("\nEnter the directory path to scan\n")
        if not directory_to_scan:
            directory_to_scan ="/home/p1rate/Desktop/Labs/Malware/"
            #ask for user input as one might require just the directories to be scanned
        print(f"\n Choose an Options \n =============================================\n 1. Scan  {directory_to_scan} Now \n 2. Monitor Directory {directory_to_scan} \n 3. Exit\n")
        ch = int(input())
        if ch==1:
            scanner.listContents(directory_to_scan)
        elif ch==2:
            rts = RealTimeScanner()
            rts.startWatching(directory_to_scan) 
        else:
            print("[+] Exiting ......")
            exit()
    except KeyboardInterrupt:
        print("[+] Exiting... Cancelled by User ")